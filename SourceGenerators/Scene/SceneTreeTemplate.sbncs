{{- func render_assignment_noinner(node) ~}}
    {{NSIndent}}{{NSIndent}}{{NSIndent}}
    {{NSIndent}}{{~ if node.IsNode ~}} 
    {{NSIndent}}{{node.MemberName}} = this.Require<{{node.Type}}>({{node.Path}});
    {{NSIndent}}{{~ else ~}}
    {{NSIndent}}{{node.MemberName}} = this.RequireContract<{{node.Type}}>({{node.Path}});
    {{NSIndent}}{{~ end ~}}
{{~ end -}}

{{- func render_assignment_inner(node) ~}}
    {{NSIndent}}{{NSIndent}}{{NSIndent}}{{NSIndent}}
    {{NSIndent}}{{NSIndent}}{{~ if node.IsOptionNode && node.InnerIsNode ~}}{{node.MemberName}} = this.Optional<{{node.InnerType}}>({{node.Path}});
    {{NSIndent}}{{NSIndent}}{{~ else if node.IsScanner ~}}
    {{NSIndent}}{{NSIndent}}{{node.MemberName}} = this.ExpectFromGroup<{{node.InnerType}}>({{node.Path}});
    {{NSIndent}}{{NSIndent}}{{~ else ~}}
    {{NSIndent}}{{NSIndent}}{{node.MemberName}} = this.OptionalContract<{{node.InnerType}}>({{node.Path}});
    {{NSIndent}}{{NSIndent}}{{~ end ~}}
{{~ end -}}

using System;
using Godot;

using static GodotStrict.Helpers.Prelude;
using GodotStrict.Types;

{{~NSOpen~}}
{{NSIndent}}partial class {{ClassName}}
{{NSIndent}}{
{{NSIndent}}    void __DiArrange_autogenerated()
{{NSIndent}}    {
{{~
for node in LocalNodes
    if !node.InnerType
        render_assignment_noinner node
    else
        render_assignment_inner node
    end
end
~}}
    }
{{NSIndent}}}
{{~NSClose~}}

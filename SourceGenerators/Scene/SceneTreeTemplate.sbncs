{{- func render_assignment_noinner(node) ~}}
{{NSIndent}}{{NSIndent}}    if ({{node.MemberName}} is Node)
{{NSIndent}}{{NSIndent}}    {
{{NSIndent}}{{NSIndent}}{{NSIndent}}   {{node.MemberName}} = this.Require<{{node.Type}}>({{if node.Path == ""}}"{{node.Path}}"{{end}}}});
{{NSIndent}}{{NSIndent}}    }
{{NSIndent}}{{NSIndent}}    else
{{NSIndent}}{{NSIndent}}    {
{{NSIndent}}{{NSIndent}}{{NSIndent}}   {{node.MemberName}} = this.RequireContract<{{node.Type}}>({{if node.Path == ""}}"{{node.Path}}"{{end}}}});
{{NSIndent}}{{NSIndent}}    }
{{~ end -}}

{{- func render_assignment_inner(node) ~}}
{{NSIndent}}{{NSIndent}} {{if node.InnerIsNode && node.InnerType != ""}}
{{NSIndent}}{{NSIndent}}   if ({{node.MemberName}} is OptionNode<{{node.InnerType}}>)
{{NSIndent}}{{NSIndent}}   {
{{NSIndent}}{{NSIndent}}{{NSIndent}} {{node.MemberName}} = this.Optional<{{node.InnerType}}>({{if node.Path == ""}}"{{node.Path}}"{{end}});
{{NSIndent}}{{NSIndent}}   }
{{NSIndent}}{{NSIndent}}   else if ({{node.MemberName}} is Scanner<{{node.InnerType}}>)
{{NSIndent}}{{NSIndent}}   {
{{NSIndent}}{{NSIndent}}{{NSIndent}} {{node.MemberName}} = this.ExpectFromGroup<{{node.InnerType}}>("{{node.Path}}");
{{NSIndent}}{{NSIndent}}   }
{{NSIndent}}{{NSIndent}}   else
{{NSIndent}}{{NSIndent}}   {
{{NSIndent}}{{NSIndent}}{{NSIndent}} {{node.MemberName}} = this.OptionalContract<{{node.Type}}>({{if node.Path == ""}}"{{node.Path}}"{{end}})
{{NSIndent}}{{NSIndent}}   } 
{{NSIndent}}{{NSIndent}} {{end}}
{{~ end -}}


using System;
using Godot;

using static GodotStrict.Helpers.Prelude;
using GodotStrict.Types;

{{~NSOpen~}}
{{NSIndent}}partial class {{ClassName}}
{{NSIndent}}{
{{NSIndent}}    void __AutoWire()
{{NSIndent}}    {
{{~
for node in LocalNodes
    if node.InnerType == ""
        render_assignment_noinner node
    else
        render_assignment_inner node
end
~}}
{{NSIndent}}    }
{{NSIndent}}}
{{~NSClose~}}

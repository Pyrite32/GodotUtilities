{{- func render_assignment_noinner(node) ~}}
    
    {{~ if node.LookAtSibling ~}}
    {{~ if node.IsOptionManyNode ~}}
        {{node.MemberName}} = this.OptionalSiblings<{{node.InnerType}}>({{node.Path}});
        {{~ else ~}}
        {{node.MemberName}} = this.RequireSibling<{{node.Type}}>({{node.Path}});
        {{~ end ~}}
    {{~ else ~}}
    {{~ if node.IsOptionManyNode ~}}
        {{node.MemberName}} = this.OptionalMany<{{node.InnerType}}>({{node.Path}});
        {{~ else ~}}
        {{node.MemberName}} = this.Require<{{node.Type}}>({{node.Path}});
        {{~ end ~}}
    {{~ end ~}}
{{~ end -}}

{{- func render_assignment_inner(node) ~}}
    
    {{~ if node.IsOptionNode && node.InnerIsNode ~}}
        {{~ if node.LookAtSibling ~}}
            {{~ if node.IsOptionManyNode ~}}
            {{node.MemberName}} = this.OptionalSiblings<{{node.InnerType}}>({{node.Path}});
            {{~ else ~}}
            {{node.MemberName}} = this.OptionalSibling<{{node.InnerType}}>({{node.Path}});
            {{~ end ~}}

        {{~ else ~}}
    {{~ end ~}}
    {{~ else if node.IsScanner ~}}
    {{node.MemberName}} = ExpectFromGroup<{{node.InnerType}}>({{node.Path}});
    {{~ else ~}}
    {{~ if node.IsOptionManyNode ~}}
        {{node.MemberName}} = this.OptionalMany<{{node.InnerType}}>({{node.Path}});
    {{~ else ~}}
        {{~ if node.IsOptionNode ~}}
            {{node.MemberName}} = this.Optional<{{node.InnerType}}>({{node.Path}});
        {{~ else ~}}
            {{node.MemberName}} = this.Require<{{node.Type}}>({{node.Path}});
        {{~ end ~}}
    {{~ end ~}}
    {{~ end ~}}
{{~ end -}}

using System;
using Godot;

using GodotStrict.Helpers.Dependency;
using GodotStrict.Types;
using static GodotStrict.Helpers.Dependency.DependencyHelper;

{{~NSOpen~}}
partial class {{ClassName}}
{
    void 依赖注入()
    {
{{~ for node in LocalNodes
    if !node.InnerType
        render_assignment_noinner node
    else
        render_assignment_inner node
    end
end ~}}
    }
}
{{~NSClose~}}
